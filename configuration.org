#+title: Emacs Configuration
#+author: vapour101
#+options: num:nil

* Configure =use-package=

This makes sure that =use-package= will install any missing packages.

#+begin_src emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+end_src

Always compile packages, and use the newest version available.

#+begin_src emacs-lisp
  (use-package auto-compile
    :config (auto-compile-on-load-mode))

  (setq load-prefer-newer t)
#+end_src

* Use [[https://github.com/hrs/sensible-defaults.el][sensible-defaults.el]]

#+begin_src emacs-lisp
  (load-file "~/.emacs.d/sensible-defaults.el")
  (sensible-defaults/use-all-settings)
  (sensible-defaults/use-all-keybindings)
#+end_src

* Utility Functions

** HRS's utility functions

#+begin_src emacs-lisp
  (defun hrs/kill-current-buffer ()
    "Kill the current buffer without prompting."
    (interactive)
    (kill-buffer (current-buffer)))

  (defun hrs/notify-send (title message)
    "Display a desktop notification by shelling out to `notify-send'."
    (call-process-shell-command
      (format "notify-send -t 2000 \"%s\" \"%s\"" title message)))
#+end_src

* UI Preferences

** Window Chrome

Kill the scroll bars and menus.

#+begin_src emacs-lisp
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (scroll-bar-mode -1)
  (set-window-scroll-bars (minibuffer-window) nil nil)
#+end_src

Bind the frame title to the current project name.

#+begin_src emacs-lisp
  (setq frame-title-format '((:eval (projectile-project-name))))
#+end_src

** Load theme

This in block should be put in =~/.Xresources= and loaded from =~/.xprofile=
with ~xrdb .Xresources~ so Emacs loads the right font even before loading this
config and the background doesn't flicker.

#+begin_src conf :tangle no
! Emacs settings so they are set even before Emacs starts
! See: https://www.gnu.org/software/emacs/manual/html_node/emacs/Table-of-Resources.html#Table-of-Resources
Emacs.font: Operator Mono-7:weight=medium:width=normal
Emacs.reverseVideo: on
Emacs.menuBar: 0
Emacs.toolBar: 0
Emacs.verticalScrollBars: off
#+end_src

#+begin_src emacs-lisp
	(use-package moe-theme
	  :unless noninteractive
	  :config
	  (moe-light)
	  (moe-theme-set-color 'green))
#+end_src

** =moody= Modeline

#+begin_src emacs-lisp
  (use-package moody
    :config
    (setq x-underline-at-descent-line t)
    (moody-replace-mode-line-buffer-identification)
    (moody-replace-vc-mode))
#+end_src

** Hide minor modes with =minions=

#+begin_src emacs-lisp
  (use-package minions
    :config
    (setq minions-mode-line-lighter ""
          minions-mode-line-delimiters '("" . ""))
    (minions-mode 1))
#+end_src

** Disable visual bell

#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

** Scroll consertively

#+begin_src emacs-lisp
  (setq scroll-conservatively 100)
#+end_src

** Highlight the current line

#+begin_src emacs-lisp
  (global-hl-line-mode)
#+end_src

** Highlight uncommitted changes

#+begin_src emacs-lisp
  (use-package diff-hl
    :config
    (add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
    (add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode))
#+end_src

* General Editting

** =move-text=

#+begin_src emacs-lisp
  (use-package move-text
    :bind
    ("M-n" . move-text-down)
    ("M-p" . move-text-up))
#+end_src

** Cycle Spacing

#+begin_src emacs-lisp
  (global-set-key (kbd "M-SPC") 'cycle-spacing)
#+end_src

* Project Management

** =ripgrep=

Use =deadgrep= as an interface to =ripgrep=. (Make sure you actually have
=ripgrep= installed.)

#+begin_src emacs-lisp
  (use-package deadgrep)
#+end_src

** =company= Everywhere

#+begin_src emacs-lisp
  (use-package company
	:hook (after-init . global-company-mode))
#+end_src

** =projectile=

#+begin_src emacs-lisp
  (use-package projectile
	:bind
	("C-c v" . deadgrep)
	:config
	(setq projectile-switch-project-action 'projectile-dired)
	(setq projectile-require-project-root nil)
	(projectile-global-mode))
#+end_src

** =undo-tree=

#+begin_src emacs-lisp
  (use-package undo-tree)
#+end_src

* =Org-Mode=

** Behaviour

Include =org-tempo= to restore Org's easy-templates.

#+begin_src emacs-lisp
  (use-package org
    :ensure org-plus-contrib
    :config
    (require 'org-tempo))
#+end_src

Make TAB act correctly in source blocks.

#+begin_src emacs-lisp
  (setq org-src-tab-acts-natively t)
#+end_src

Use the current window for editting code snippets.

#+begin_src emacs-lisp
  (setq org-src-window-setup 'current-window)
#+end_src

Elisp template
#+begin_src emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("el" . "src emacs-lisp"))
#+end_src

** Display Preferences

Use pretty bullets

#+begin_src emacs-lisp
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode))
#+end_src

Use a downward-pointing arrow instead of ellipsis for collapsed headers.

#+begin_src emacs-lisp
  (setq org-ellipsis "â¤µ")
#+end_src

Use syntax highlighting when source blocks.

#+begin_src emacs-lisp
  (setq org-src-fontify-natively t)
#+end_src

* General Settings

** Always kill current buffer

#+begin_src emacs-lisp
  (global-set-key (kbd "C-x k") 'hrs/kill-current-buffer)
#+end_src

** Set up =helpful=

#+begin_SRC emacs-lisp
  (use-package helpful
	:config
	(global-set-key (kbd "C-h f") #'helpful-callable)
	(global-set-key (kbd "C-h v") #'helpful-variable)
	(global-set-key (kbd "C-h k") #'helpful-key))
#+end_SRC

* Programming Environments

Properly indent to 4 spaces by default and use spaces instead of tabs.

#+begin_src emacs-lisp
  (setq-default tab-width 4)
  (setq-default indent-tabs-mode nil)
#+end_src

Treat camelCase terms as separate words everywhere.

#+begin_src emacs-lisp
  (use-package subword
    :config (global-subword-mode 1))
#+end_src

Automatically scroll the =*compilation*= buffer.

#+begin_src emacs-lisp
  (setq compilation-scroll-output t)
#+end_src

** Elisp

Use =paredit= to balance parentheses and =rainbow-delimiters= to color them.

#+begin_src emacs-lisp
  (use-package paredit
	:hook (emacs-lisp-mode . paredit-mode))

  (use-package rainbow-delimiters
	:hook (emacs-lisp-mode . rainbow-delimiters-mode))

  (use-package eldoc
	:hook (emacs-lisp-mode . eldoc-mode))

  (add-hook 'emacs-lisp-mode-hook (lambda () (setq show-paren-style 'expression)))
#+end_src
